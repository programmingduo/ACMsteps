<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en-US">
<title>Source Code</title>
<link type="text/css" rel="stylesheet" href="sh_style.css">
<script type="text/javascript" src="sh_main.js"></script>
<script type="text/javascript" src="lang/sh_cpp.js"></script>
</head><body lang="en-US" link=blue alink=blue vlink=blue onload="sh_highlightDocument()">
<p align=center><font size=4 color=#333399>Source Code</font></p>
<table align="center" style="font-size:10pt"><tr><td><b>Problem:</b> <a href="problem?id=1177">1177</a></td><td width=10px></td><td><b>User:</b> <a href="userstatus?user_id=T6">T6</a></td></tr>
<tr><td><b>Memory:</b> 624K</td><td width=10px></td><td><b>Time:</b> 32MS</td></tr>
<tr><td><b>Language:</b> G++</td><td width=10px></td><td><b>Result:</b> <font color=blue>Accepted</font></td></tr></table>
<ul><li><font color=#333399 size=5>Source Code</font></li>
<pre class="sh_cpp" style="font-family:Courier New,Courier,monospace">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N=10080;

struct Node{
    int left,right;
    Node *lchild,* rchild;
    int len,cover;
    int m,line;
    bool lcover,rcover;
    Node(){lchild=rchild=NULL;lcover=rcover=false;m=line=0;}
}root;

struct Line{
    int top,end;
    int x;
    bool tag;
}line[N];
bool cmp(Line a,Line b){
    return a.x&lt;b.x;
}
class tree{
    private:
        int n,index[N],len;
    public:
        bool init();
        void getm(Node*);
        void getline(Node*);
        void build(Node*,int,int);
        void insert(Node*,int,int);
        void del(Node*,int,int);
        int getindex(int);
        void ans();
};

void tree::build(Node* node,int l,int r){
     node-&gt;right=r,node-&gt;left=l;
     node-&gt;len=index[r]-index[l];
     node-&gt;cover=0;

     if(node-&gt;right-node-&gt;left&gt;1){
         node-&gt;lchild=new Node;
         node-&gt;rchild=new Node;
         build(node-&gt;lchild,l,(l+r)/2);
         build(node-&gt;rchild,(l+r)/2,r);
     }
}

void tree::insert(Node* node,int l,int r){
     if(l&lt;=node-&gt;left&#38;&#38;r&gt;=node-&gt;right)
                 node-&gt;cover++;
     else{
         int mid=(node-&gt;left+node-&gt;right)/2;
         if(l&lt;mid)insert(node-&gt;lchild,l,r);
         if(r&gt;mid)insert(node-&gt;rchild,l,r);
     }
     getm(node);
     getline(node);
}

void tree::del(Node* node,int l,int r){

     if(l&lt;=node-&gt;left&#38;&#38;r&gt;=node-&gt;right)  node-&gt;cover--;
     else{
         int mid=(node-&gt;left+node-&gt;right)/2;
         if(l&lt;mid)del(node-&gt;lchild,l,r);
         if(r&gt;mid)del(node-&gt;rchild,l,r);
     }
     getm(node);
     getline(node);
}

void tree::getm(Node* node){
     if(node-&gt;cover&gt;0)  node-&gt;m=node-&gt;len;
     else{
         if(node-&gt;right-node-&gt;left&gt;1)
                        node-&gt;m=node-&gt;lchild-&gt;m+node-&gt;rchild-&gt;m;
         else   node-&gt;m=0;
     }
}

void tree::getline(Node* node){
    if(node-&gt;cover&gt;0){
         node-&gt;lcover=node-&gt;rcover=true;
         node-&gt;line=1;
    }else if(node-&gt;right-node-&gt;left&gt;1){
         node-&gt;lcover=node-&gt;lchild-&gt;lcover;
         node-&gt;rcover=node-&gt;rchild-&gt;rcover;
         node-&gt;line=node-&gt;lchild-&gt;line+node-&gt;rchild-&gt;line-node-&gt;rchild-&gt;lcover*node-&gt;lchild-&gt;rcover;
    }else{
        node-&gt;lcover=node-&gt;rcover=false;
        node-&gt;line=0;
    }
}

int tree::getindex(int y){
    int l=0,r=len,mid;
        while(true){
                mid=(l+r)/2;
                if(index[mid]==y) return mid;
                if(index[mid]&gt;y) r=mid-1;
                else l=mid+1;
        }
}

bool tree::init(){
    if(scanf(&#34;%d&#34;,&#38;n)==EOF) return false;
    int i,x1,y1,x2,y2;;
    for(i=0;i&lt;n;++i){
        scanf(&#34;%d%d%d%d&#34;,&#38;x1,&#38;y1,&#38;x2,&#38;y2);
        line[2*i].x=x1,line[2*i+1].x=x2;
        line[2*i].top=line[2*i+1].top=y1;
        line[2*i].end=line[2*i+1].end=y2;
        line[2*i].tag=true,line[2*i+1].tag=false;
        index[2*i]=y1,index[2*i+1]=y2;
    }
    sort(index,index+2*n);
    sort(line,line+2*n,cmp);
    for(i=1,len=0;i&lt;2*n;++i)
        if(index[i]!=index[len]) index[++len]=index[i];
    build(&#38;root,0,len);
}

void tree::ans(){
    int i,res=0,m=0;
    for(i=0;i&lt;2*n-1;++i)    {
        if(line[i].tag==true)
                        insert(&#38;root,getindex(line[i].top),getindex(line[i].end));
                else
                        del(&#38;root,getindex(line[i].top),getindex(line[i].end));
        res+=root.line*(line[i+1].x-line[i].x)*2;
        res+=abs(root.m-m);
        m=root.m;
    }
    del(&#38;root,getindex(line[i].top),getindex(line[i].end));
    res+=abs(root.m-m);
    printf(&#34;%d\n&#34;,res);
}

int main(){
    tree s;
    while(s.init()){
        s.ans();
    }
    return 0;
}

</pre>
</ul>
</body></html>
