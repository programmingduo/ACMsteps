<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en-US">
<title>Source Code</title>
<link type="text/css" rel="stylesheet" href="sh_style.css">
<script type="text/javascript" src="sh_main.js"></script>
<script type="text/javascript" src="lang/sh_cpp.js"></script>
</head><body lang="en-US" link=blue alink=blue vlink=blue onload="sh_highlightDocument()">
<p align=center><b><font size=4 color=#333399>Source Code</font></b></p>
<table align="center" style="font-size:10pt"><tr><td><b>Problem: <a href="problem?id=1151">1151</a></b></td><td width=10px></td><td><b>User: <a href="userstatus?user_id=mulan">mulan</a></b></td></tr>
<tr><td><b>Memory: 216K</b></td><td width=10px></td><td><b>Time: 0MS</b></td></tr>
<tr><td><b>Language: C++</b></td><td width=10px></td><td><b>Result: <font color=blue>Accepted</font></b></td></tr></table>
<ul><li><b><font color=#333399 size=5>Source Code</font></li>
</b>
<pre class="sh_cpp" style="font-family:Courier New,Courier,monospace"><b>#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;math.h&gt;
#include &lt;set&gt;
using namespace std;
double y[210];
struct CNode 
{
	int L,R;
	CNode * pLeft, * pRight;
	double Len; //当前,本区间上有多长的部分是落在那些矩形中的

	int Covers;//本区间当前被多少个矩形完全包含

};
CNode Tree[1000];
//CNode Tree[20];
struct CLine
{
	double x,y1,y2;
	bool bLeft;
}lines[210];

int nNodeCount = 0;
bool operator&lt; ( const CLine &#38; l1,const CLine &#38; l2)
{
	return l1.x &lt; l2.x;
}
template &lt;class F,class T&gt;
F bin_search(F s, F e, T val)   
{   
		F L = s;
		F R = e - 1;
        while(L &lt;= R )   {
             F mid = L + (R-L)/2;   
             if( !( * mid &lt; val  || val &lt; * mid ))
				 return mid;
             else if(val &lt; * mid)
				 R = mid - 1;   
             else 
				 L = mid + 1;   
        }   
        return e;   
}
int Mid(CNode * pRoot)
{
	return (pRoot-&gt;L + pRoot-&gt;R ) &gt;&gt;1;
}

void Insert(CNode * pRoot,int L, int R)
{
	if( pRoot-&gt;L == L &#38;&#38;  pRoot-&gt;R == R){
		pRoot-&gt;Len = y[R+1] - y[L];
		pRoot-&gt;Covers ++;
		return;
	}
	if( R &lt;= Mid(pRoot))
		Insert(pRoot-&gt;pLeft,L,R);		
	else if( L &gt;= Mid(pRoot)+1) 
		Insert(pRoot-&gt;pRight,L,R);		
	else {
		Insert(pRoot-&gt;pLeft,L,Mid(pRoot));		
		Insert(pRoot-&gt;pRight,Mid(pRoot)+1,R);		
	}
	if( pRoot-&gt;Covers == 0) //如果不为0，则说明本区间当前仍然被某个矩形完全包含，则不能更新 Len
		pRoot-&gt;Len = pRoot-&gt;pLeft -&gt;Len + pRoot-&gt;pRight -&gt;Len;
}
void Delete(CNode * pRoot,int L, int R)
{
	if( pRoot-&gt;L == L &#38;&#38; pRoot-&gt;R == R) {
		pRoot-&gt;Covers --;
		if( pRoot-&gt;Covers == 0 )
			if( pRoot-&gt;L == pRoot-&gt;R )
				pRoot-&gt;Len = 0;
			else
				pRoot-&gt;Len = pRoot-&gt;pLeft -&gt;Len + pRoot-&gt;pRight -&gt;Len;
		return ;
	}
	if( R &lt;= Mid(pRoot))
		Delete(pRoot-&gt;pLeft,L,R);		
	else if( L &gt;= Mid(pRoot)+1)
		Delete(pRoot-&gt;pRight,L,R);		
	else {
		Delete(pRoot-&gt;pLeft,L,Mid(pRoot));		
		Delete(pRoot-&gt;pRight,Mid(pRoot)+1,R);		
	}
	if( pRoot-&gt;Covers == 0) //如果不为0，则说明本区间当前仍然被某个矩形完全包含，则不能更新 Len
		pRoot-&gt;Len = pRoot-&gt;pLeft -&gt;Len + pRoot-&gt;pRight -&gt;Len;
}

void BuildTree( CNode * pRoot, int L,int R)
{
	pRoot-&gt;L = L;
	pRoot-&gt;R = R;
	pRoot-&gt;Covers = 0;
	pRoot-&gt;Len = 0;
	if( L == R)
		return;
	nNodeCount ++;
	pRoot-&gt;pLeft = Tree + nNodeCount;
	nNodeCount ++;
	pRoot-&gt;pRight = Tree + nNodeCount;
	BuildTree( pRoot-&gt;pLeft,L,(L+R)/2);
	BuildTree( pRoot-&gt;pRight,(L+R)/2+1,R);
}
int main()
{
	int n;
	int i,j,k;
	double x1,y1,x2,y2;
	int yc,lc;
	int nCount = 0;
	int t = 0;
	while(true) {
		scanf(&#34;%d&#34;,&#38;n);
		if( n == 0)
			break;
		t ++;
		yc = lc = 0;
		for( i = 0;i &lt; n;i ++ ) {
			scanf(&#34;%lf%lf%lf%lf&#34;, &#38;x1, &#38;y1,&#38;x2,&#38;y2);
			y[yc++] = y1;
			y[yc++] = y2;
			lines[lc].x = x1;
			lines[lc].y1 = y1;
			lines[lc].y2 = y2;
			lines[lc].bLeft = true;
			lc ++;
			lines[lc].x = x2;
			lines[lc].y1 = y1;
			lines[lc].y2 = y2;
			lines[lc].bLeft = false;
			lc ++;
		}
		sort(y,y + yc);
		yc = unique(y,y+yc) - y;
		nNodeCount = 0;
		//yc 是横线的条数，yc- 1是纵向区间的个数，这些区间从0开始编号，那么最后一个区间
		//编号就是yc - 1 -1
		BuildTree(Tree, 0, yc - 1 - 1);
		sort(lines,lines + lc);
		double Area = 0;
		for( i = 0;i &lt; lc - 1 ; i ++ ) {
			int L = bin_search( y,y+yc,lines[i].y1) - y; 
			int R = bin_search( y,y+yc,lines[i].y2) - y;
			if( lines[i].bLeft )
				Insert(Tree,L,R-1);////
			else
				Delete(Tree,L,R-1);
			Area += Tree[0].Len * (lines[i+1].x - lines[i].x);
		}
		printf(&#34;Test case #%d\n&#34;,t);
		printf(&#34;Total explored area: %.2lf\n&#34;,Area);
		printf(&#34;\n&#34;,Area);
	}
	return 0;
}</b></pre>
</ul>
</body></html>
