<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en-US">
<title>Source Code</title>
<link type="text/css" rel="stylesheet" href="sh_style.css">
<script type="text/javascript" src="sh_main.js"></script>
<script type="text/javascript" src="lang/sh_cpp.js"></script>
</head><body lang="en-US" link=blue alink=blue vlink=blue onload="sh_highlightDocument()">
<p align=center><font size=4 color=#333399>Source Code</font></p>
<table align="center" style="font-size:10pt"><tr><td><b>Problem:</b> <a href="problem?id=2528">2528</a></td><td width=10px></td><td><b>User:</b> <a href="userstatus?user_id=guowei">guowei</a></td></tr>
<tr><td><b>Memory:</b> 36068K</td><td width=10px></td><td><b>Time:</b> 79MS</td></tr>
<tr><td><b>Language:</b> C++</td><td width=10px></td><td><b>Result:</b> <font color=blue>Accepted</font></td></tr></table>
<ul><li><font color=#333399 size=5>Source Code</font></li>
<pre class="sh_cpp" style="font-family:Courier New,Courier,monospace">/*
1
3
1 10
1 5
7 10
output 应为3
*/

#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;math.h&gt;

using namespace std;
int n;
struct CPost
{
	int L,R;
};
CPost posters[10100];
int x[20200];
int hash[10000010]; //has[i]表示瓷砖i所处的离散化后的区间的编号
struct CNode 
{
	int L,R;
	bool bCovered; //本区间是否已经被完全覆盖 
	CNode * pLeft, * pRight;
};
CNode Tree[1000000];
int nNodeCount = 0;
int Mid( CNode * pRoot)
{
	return (pRoot-&gt;L + pRoot-&gt;R)/2;
}
void BuildTree( CNode * pRoot, int L, int R)
{
	pRoot-&gt;L = L;
	pRoot-&gt;R = R;
	pRoot-&gt;bCovered = false;
	if( L == R )
		return;
	nNodeCount ++;
	pRoot-&gt;pLeft = Tree + nNodeCount;
	nNodeCount ++;
	pRoot-&gt;pRight = Tree + nNodeCount;
	BuildTree( pRoot-&gt;pLeft,L,(L+R)/2);
	BuildTree( pRoot-&gt;pRight,(L+R)/2 + 1,R);
}
bool Post( CNode  *pRoot, int L, int R)
{
	if( pRoot-&gt;bCovered )
		return false;
	if( pRoot-&gt;L == L &#38;&#38; pRoot-&gt;R == R) {
		pRoot-&gt;bCovered = true;
		return true;
	}
	bool bResult ;
	if( R &lt;= Mid(pRoot) ) 
		bResult = Post( pRoot-&gt;pLeft,L,R);
	else if( L &gt;= Mid(pRoot) + 1)
		bResult = Post( pRoot-&gt;pRight,L,R);
	else {
		bool b1 = Post(pRoot-&gt;pLeft ,L,Mid(pRoot));
		bool b2 = Post( pRoot-&gt;pRight,Mid(pRoot) + 1,R);
		bResult = b1 || b2;
	}
	//要更新根节点的覆盖情况
	if( pRoot-&gt;pLeft-&gt;bCovered &#38;&#38; pRoot-&gt;pRight-&gt;bCovered )
		pRoot-&gt;bCovered = true;
	return bResult;
}
int main()
{
	int t;
	int i,j,k;
	scanf(&#34;%d&#34;,&#38;t);
	int nCaseNo = 0;
	while(t--) {
		nCaseNo ++;
		scanf(&#34;%d&#34;,&#38;n);
		int nCount = 0;
		for( i = 0;i &lt; n;i ++ )  {
			scanf(&#34;%d%d&#34;, &#38; posters[i].L,&#38; posters[i].R );

			x[nCount++] = posters[i].L;
			x[nCount++] = posters[i].R;
		}
		sort(x,x+nCount);
		nCount = unique(x,x+nCount) - x; //去掉重复元素


		
		int nIntervalNo = 0;
		for( i = 0;i &lt; nCount;i ++ ) {
			hash[x[i]] = nIntervalNo;
			if( i &lt; nCount - 1) {
				if( x[i+1] - x[i] == 1)
					nIntervalNo ++;
				else
					nIntervalNo += 2;
			}
		}
		
		BuildTree( Tree,0,nIntervalNo );
		int nSum = 0;
		for( i = n - 1;i &gt;= 0;i -- ) { // 从后往前看板是否看得见
			if( Post(Tree,hash[posters[i].L],hash[posters[i].R]))
				nSum ++;
		}
		printf(&#34;%d\n&#34;,nSum);
	}
	return 0;
}</pre>
</ul>
</body></html>
