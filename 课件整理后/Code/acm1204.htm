<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en-US">
<title>Source Code</title>
<link type="text/css" rel="stylesheet" href="sh_style.css">
<script type="text/javascript" src="sh_main.js"></script>
<script type="text/javascript" src="lang/sh_cpp.js"></script>
</head><body lang="en-US" link=blue alink=blue vlink=blue onload="sh_highlightDocument()">
<p align=center><b><font size=4 color=#333399>Source Code</font></b></p>
<table align="center" style="font-size:10pt"><tr><td><b>Problem: <a href="problem?id=1204">1204</a></b></td><td width=10px></td><td><b>User: <a href="userstatus?user_id=guowei">guowei</a></b></td></tr>
<tr><td><b>Memory: 12652K</b></td><td width=10px></td><td><b>Time: 1094MS</b></td></tr>
<tr><td><b>Language: C++</b></td><td width=10px></td><td><b>Result: <font color=blue>Accepted</font></b></td></tr></table>
<ul><li><b><font color=#333399 size=5>Source Code</font></li>
</b>
<pre class="sh_cpp" style="font-family:Courier New,Courier,monospace"><b>#include &lt;iostream&gt;
#include &lt;queue&gt;
using namespace std;

int L,C,W;
#define MMAX 1100
char Puzzle[MMAX][MMAX];
char s[MMAX];
char subs[MMAX][MMAX];
int subslen[MMAX];

int ind[8][2]={-1,0,-1,1,0,1,1,1,1,0,1,-1,0,-1,-1,-1};



struct Pos
{
	int L,C;
	char Dir;
};
Pos Ans[MMAX];

class CNode
{
public:


	int Prev; //前驱指针，
	int nSubStrNo; // -1 则表示本节点不是模式串的终止节点，
				    // 否则就表示本节点是编号为 nSubStrNo 的模式串的终止节点
	int Next[26];
	
	CNode( ) {
		for( int i = 0; i &lt; 26;i ++ )
			Next[i] = -1;
		Prev = -1;
		nSubStrNo = -1;
	}

};

CNode Tree[100000]; 
int nNodeNum;
void Insert(char * s, int idx)
{
	int root = 1;
	int nTmp;
	for( int i = 0; s[i];i ++ ) {
		int idx = s[i]-&#39;A&#39;;
		if( Tree[root].Next[idx] == -1 ) {
			Tree[root].Next[idx] = nNodeNum;
			nNodeNum ++;
		}
		root = Tree[root].Next[idx];
	}
	Tree[root].nSubStrNo = idx;
}
void BuildDfa()
{
	int i;
	deque&lt;int&gt; q;
	q.push_back(1);
	while(!q.empty()) {
		int n = q.front();
		q.pop_front();
		for( i = 0;i &lt; 26;i ++ ) {
			int v = Tree[n].Next[i];
			if( v != -1) {
				q.push_back(v);
				int Prev = Tree[n].Prev;
				while( true ) {
					if( Tree[Prev].Next[i] != -1 ) {
						Tree[v].Prev = Tree[Prev].Next[i];
						break;
					}
					else
						Prev = Tree[Prev].Prev;
				}
			}
		}
	}
}

int ComSearchDfa( char * s, int &#38; nSubStrNo)
{
	int root = 1;
	for( int i = 0; s[i];i ++ ) {
		int nIdx = s[i] - &#39;A&#39;;
		while( root &gt;= 1 ) {
			if( Tree[root].Next[nIdx] != -1 ) {
				root = Tree[root].Next[nIdx];
				if( Tree[root].nSubStrNo != -1) { //Tree[root]是一个模式串的停止节点
					nSubStrNo = Tree[root].nSubStrNo;
					return i;
				}
				else
					break; //当前字符已经被匹配，当然要break,匹配下一个字符
			}
			else 
				root = Tree[root].Prev ;
		}
		if( root &lt; 1 )
			root = 1;
	}
	return -1;
}

inline bool Good(int i,int j)
{
	return i&gt;=0 &#38;&#38; i&lt;L &#38;&#38; j&gt;=0 &#38;&#38; j&lt;C;
}

void SearchDfa( int i,int j,int dir)
//用从第i行，第j列开始，沿dir方向的字符串来跑自动机

{
	int root = 1;
	while( Good(i,j)) {
		int nIdx = Puzzle[i][j] - &#39;A&#39;;
		while( root &gt;= 1 ) {
			if( Tree[root].Next[nIdx] != -1 ) {
				root = Tree[root].Next[nIdx];
				int n = Tree[root].nSubStrNo;
				if( n != -1 &#38;&#38; Ans[n].Dir == -1) {
					//如果模式串n还没有被查到过
						Ans[n].L = i - (subslen[n] -1 )* ind[dir][0] ;			
						Ans[n].C = j - (subslen[n] -1 )* ind[dir][1] ;			
						Ans[n].Dir = dir; 
				}
				break; //当前字符已经被匹配，当然要break,匹配下一个字符
			}
			else 
				root = Tree[root].Prev ;
		}
		if( root &lt; 1 )
			root = 1;
		i+=ind[dir][0];
		j+=ind[dir][1];

	}
}

int main()
{
	
	scanf(&#34;%d%d%d&#34;,&#38;L,&#38;C,&#38;W);
	int i,j,k;
	for( i = 0;i &lt; L; i ++ ) 
		scanf(&#34;%s&#34;, Puzzle[i]);
	
	for( i = 0; i &lt; 26;i ++ )
		Tree[0].Next[i] = 1;
	
	Tree[1].Prev = 0;
	nNodeNum = 2;
	for( i = 0;i &lt; W;i ++ ) {
		scanf(&#34;%s&#34;,subs[i]);
		subslen[i] = strlen(subs[i]);
		Insert(subs[i],i);
	}
	BuildDfa();

	for( i = 0;i &lt; MMAX;i ++ )
		Ans[i].Dir = -1;
	
	for( i=0;i&lt;L;i++) {
		SearchDfa(i,0,2);
		SearchDfa(i,C-1,6);
	}

	for( i=0;i&lt;C;i++) {
		SearchDfa(0,i,4);
		SearchDfa(L-1,i,0);
	}

	for(i=0;i&lt;L;i++) {
		SearchDfa(i,0,3);
		SearchDfa(i,C-1,7);
	}
	for(i=0;i&lt;C;i++) {
		SearchDfa(0,i,3);
		SearchDfa(L-1,i,7);
	}

	for( i=0;i&lt;L;i++) {
		SearchDfa(i,0,1);
		SearchDfa(i,C-1,5);
	}
	for(i=0;i&lt;C;i++) {
		SearchDfa(0,i,5);
		SearchDfa(L-1,i,1);
	}
	for( i = 0; i &lt; W;i ++ ) 
		printf(&#34;%d %d %c\n&#34;,Ans[i].L ,Ans[i].C,Ans[i].Dir + &#39;A&#39;);
	return 0;
}



/*
input：
2 10 2
FUANTJACKY
ANTEATERFU
ANT
ANTEATER

output:
0 2 C
1 0 C

  input:
1 3 2
ABC
AB
ABC
output
0 0 C
0 0 C

*/
</b></pre>
</ul>
</body></html>
