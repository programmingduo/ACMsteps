#include<iostream>
#include<algorithm>
using namespace std;
struct edge
{
	int u,v,w;
}e[5001];
int num;
int n,m;
int p[101];
int r[101];
int init()
{
	int i;
	for(i=1;i<=n;i++)
	{
		p[i]=i;
		r[i]=0;
	}
	return 0;
}
int cmp(edge &a,edge &b)
{
	return a.w<b.w;
}
int find(int x)
{
	if(p[x]!=x)
	{
		p[x]=find(p[x]);
	}
	return p[x];
}
int cnt;
int Union(int x,int y)
{
	int a=find(x);
	int b=find(y);
	if(a!=b)
	{
		if(r[a]<r[b])
		{
			p[a]=b;
		}
		else
		{
			p[b]=a;
			if(r[a]==r[b])
				r[a]++;
		}
	}
	return 0;
}
int main()
{
	int i,j;
	int a,b,c;
	while(scanf("%d%d",&n,&m)!=EOF&&(n||m))
	{
		num=0;
		for(i=0;i<m;i++)
		{
			scanf("%d%d%d",&a,&b,&c);
			e[num].u=a;
			e[num].v=b;
			e[num++].w=c;
		}
		sort(e,e+m,cmp);
		int best=0x7fffffff;
		for(i=0;i<m;i++)
		{
			init();
			cnt=0;
			for(j=i;j<m;j++)
			{
				Union(e[j].u,e[j].v);
				if(cnt==n-1)
				{
					break;
				}
			}
			if(cnt==n-1)
			{
				if(best>e[j].w-e[i].w)
					best=e[j].w-e[i].w;
			}
		}
		if(best<0x7fffffff)
		{
			printf("%d\n",best);
		}
		else
			printf("-1\n");
	}
	system("pause");
	return 0;

}